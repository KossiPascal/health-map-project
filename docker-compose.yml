version: "3.9"

services:

  # Service CouchDB (ex√©cution)
  couchdb:
    image: couchdb:latest
    container_name: chw-map-couchdb
    env_file:
      - ./.env  # Chemin vers le fichier .env si n√©cessaire
    ports:
      - "${COUCHDB_PORT:-5984}:5984"
    volumes:
      - ${COUCHDB_DATA_FOLDER:-./togo-chws-map-data/couchdb}:/opt/couchdb/data
    environment:
      COUCHDB_USER: ${COUCHDB_USER:-admin}
      COUCHDB_PASSWORD: ${COUCHDB_PASS:?COUCHDB_PASS must be set}
      COUCHDB_SECRET: ${COUCHDB_SECRET:-mysecret}
      COUCHDB_UUID: ${COUCHDB_UUID:-uuid-123456}
      COUCHDB_LOG_LEVEL: ${COUCHDB_LOG_LEVEL:-info}
    restart: unless-stopped
    logging:
      driver: "local"
      options:
        max-size: "${LOG_MAX_SIZE:-50m}"
        max-file: "${LOG_MAX_FILES:-10}"
    networks:
      - chw-map-net

  backend:
    build:
      context: .
      dockerfile: ${PROJECT_FOLDER:-.}/Dockerfile
    container_name: chw-map-app
    depends_on:
      - couchdb
    ports:
      - "${HTTP_PORT:-8047}:8047"
      - "${HTTPS_PORT:-4047}:4047"
    # En dev, le montage permet le hot-reload, en prod, il faut retirer ce volume pour isoler le container
    volumes:
      - ${BACKEND_FOLDER:-./backend}:/app/backend       # Montage pour d√©veloppement local (commenter/enlever en production)
      - ${VIEWS_FOLDER:-./views}:/app/views
    # - ${OSRM_FOLDER:-./osrm-server}:/app/osrm-server
    env_file:
      - ./.env                       # Charger les variables depuis un fichier .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      IS_DOCKER_RUNNING: ${IS_DOCKER_RUNNING:-true}
    # Ajouter ici toutes les variables d'environnement n√©cessaires (ou via env_file)
    restart: unless-stopped          # Red√©marrage automatique sauf arr√™t manuel
    networks:
      - chw-map-net


  # √âtape de pr√©paration des donn√©es OSRM
  osrm-prepare:
    image: osrm/osrm-backend
    container_name: osrm-prepare
    volumes:
      - ${OSRM_FOLDER:-./osrm-server}:/rawdata
      - ${OSRM_FOLDER:-./osrm-server}/togo:/data
    working_dir: /rawdata
    command:
      - bash
      - -c
      - |
        set -e
        echo "üì• V√©rification du fichier OSM..."
        if [ ! -f /rawdata/togo-latest.osm.pbf ]; then
          echo "üì• T√©l√©chargement de la carte du Togo..."
          wget -O /rawdata/togo-latest.osm.pbf https://download.geofabrik.de/africa/togo-latest.osm.pbf
        else
          echo "‚úÖ Fichier d√©j√† pr√©sent."
        fi

        echo "üì¶üó∫Ô∏è Extraction de la carte..."
        osrm-extract -p /opt/car.lua /rawdata/togo-latest.osm.pbf

        echo "üìÅ D√©placement des fichiers .osrm vers /data..."
        mv /rawdata/togo-latest.osrm* /data/

        echo "üß© Partition de la carte..."
        osrm-partition /data/togo-latest.osrm

        echo "üé® Personnalisation de la carte..."
        osrm-customize /data/togo-latest.osrm

  # Service principal OSRM (serveur de routage)
  osrm-server:
    image: osrm/osrm-backend
    container_name: osrm-server
    depends_on:
      - osrm-prepare
    volumes:
      - ${OSRM_FOLDER:-./osrm-server}/togo:/data
    ports:
      - "${OSRM_PORT:-5000}:5000"
    command: osrm-routed --algorithm mld /data/togo-latest.osrm
    networks:
      - chw-map-net
    restart: unless-stopped


# couchdb-prepare:
#   build:
#     context: .
#     dockerfile: ${DOCKER_FOLDER:-./docker}/couchdb-prepare/Dockerfile
#   container_name: chw-map-couchdb-prepare
#   depends_on:
#     - couchdb
#   env_file:
#     - ./.env 
#   volumes:
#     - ${COUCHDB_DATA_FOLDER:-./data/couchdb}:/opt/couchdb/data
#   networks:
#     - chw-map-net

networks:
  chw-map-net:
    name: ${MAP_NETWORK:-chw-map-net}
    driver: bridge
