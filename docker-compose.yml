version: "3.9"

services:

  init-local-ini:
    image: curlimages/curl
    container_name: chw-map-generate-localini
    user: root
    volumes:
      - ${PROJECT_FOLDER:-.}/couchdb-config:/output
      - ${PROJECT_FOLDER:-.}/couchdb-config/generate-local-ini.sh:/generate-local-ini.sh
    working_dir: /output
    entrypoint: sh /generate-local-ini.sh
    environment:
      COUCHDB_PORT: ${COUCHDB_PORT:?COUCHDB_PORT must be set}
      COUCHDB_BIND: ${COUCHDB_BIND:-0.0.0.0}
      COUCHDB_LOG_LEVEL: ${COUCHDB_LOG_LEVEL:-info}
      COUCHDB_TIMEOUT: 15552000
      COUCHDB_USER: ${COUCHDB_USER:-admin}
      COUCHDB_PASS: ${COUCHDB_PASS:?COUCHDB_PASS must be set}
      COUCHDB_CORS_ORIGINS: ${COUCHDB_CORS_ORIGINS:-*}
      PROJECT_FOLDER: ${PROJECT_FOLDER:-.}
    restart: on-failure
    env_file:
      - ./.env  # Chemin vers le fichier .env si n√©cessaire
    networks:
      - chw-map-net


  # Service CouchDB (ex√©cution)
  couchdb:
    image: couchdb:latest
    container_name: chw-map-couchdb
    depends_on:
      init-local-ini:
        condition: service_completed_successfully
    command: >
      sh -c "while [ ! -f /config/init-success ]; do 
              echo '‚è≥ En attente de init-local-ini...'; 
              sleep 1; 
            done;
            echo '‚úÖ Initialisation d√©tect√©e. D√©marrage de CouchDB.';
            /opt/couchdb/bin/couchdb"
    env_file:
      - ./.env  # Chemin vers le fichier .env si n√©cessaire
    ports:
      - "${COUCHDB_PORT:?COUCHDB_PORT must be set}:${COUCHDB_PORT:?COUCHDB_PORT must be set}"
    volumes:
      - chw-map-couchdb-config:/config
      - ${COUCHDB_DATA_FOLDER:-../togo-chws-map-data/couchdb}:/opt/couchdb/data
      - ${PROJECT_FOLDER:-.}/couchdb-config/custom.ini:/opt/couchdb/etc/local.d/custom.ini:ro
    environment:
      COUCHDB_USER: ${COUCHDB_USER:-admin}
      COUCHDB_PASSWORD: ${COUCHDB_PASS:?COUCHDB_PASS must be set}
      COUCHDB_SECRET: ${COUCHDB_SECRET:-mysecret}
      COUCHDB_UUID: ${COUCHDB_UUID:-uuid-123456}
      COUCHDB_LOG_LEVEL: ${COUCHDB_LOG_LEVEL:-info}
    restart: unless-stopped
    logging:
      driver: "local"
      options:
        max-size: "${LOG_MAX_SIZE:-50m}"
        max-file: "${LOG_MAX_FILES:-10}"
    networks:
      - chw-map-net

  init-couchdb:
    image: curlimages/curl
    container_name: chw-map-init-couchdb
    depends_on:
      - couchdb
    volumes:
      - ${PROJECT_FOLDER:-.}/couchdb-config/init-couchdb.sh:/init-couchdb.sh
    entrypoint: sh /init-couchdb.sh
    environment:
      COUCHDB_HOST: couchdb
      # COUCHDB_HOST: ${COUCHDB_HOST:-couchdb}
      COUCHDB_PORT: ${COUCHDB_PORT:-5984}
      COUCHDB_USER: ${COUCHDB_USER:-admin}
      COUCHDB_PASS: ${COUCHDB_PASS:?COUCHDB_PASS must be set}
      COUCHDB_DB: ${COUCHDB_DB:?COUCHDB_DB must be set}
      COUCHDB_PROTOCOL: ${COUCHDB_PROTOCOL:-http}
      COUCHDB_MEMBER_USER: ${COUCHDB_MEMBER_USER:?COUCHDB_MEMBER_USER must be set}
      COUCHDB_MEMBER_PASS: ${COUCHDB_MEMBER_PASS:?COUCHDB_MEMBER_PASS must be set}
      COUCHDB_LOG_LEVEL: ${COUCHDB_LOG_LEVEL:-info}

    restart: on-failure
    networks:
      - chw-map-net

  backend:
    build:
      context: ${PROJECT_FOLDER:-.}
      dockerfile: ./Dockerfile
    container_name: chw-map-app
    depends_on:
      - couchdb
    ports:
      - "${HTTP_PORT:-8047}:8047"
      - "${HTTPS_PORT:-4047}:4047"
    volumes:
      - ${PROJECT_FOLDER:-.}/backend:/app/backend
      - ${PROJECT_FOLDER:-.}/views:/app/views
    env_file:
      - ./.env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      IS_DOCKER_RUNNING: ${IS_DOCKER_RUNNING:-true}
    restart: unless-stopped          # Red√©marrage automatique sauf arr√™t manuel
    networks:
      - chw-map-net

  # √âtape de pr√©paration des donn√©es OSRM
  osrm-prepare:
    image: osrm/osrm-backend
    container_name: osrm-prepare
    volumes:
      - ${PROJECT_FOLDER:-.}/osrm-server:/rawdata
      - ${PROJECT_FOLDER:-.}/osrm-server/togo:/data
    working_dir: /rawdata
    command:
      - bash
      - -c
      - |
        set -e
        echo "üì• V√©rification du fichier OSM..."
        if [ ! -f /rawdata/togo-latest.osm.pbf ]; then
          echo "üì• T√©l√©chargement de la carte du Togo..."
          wget -O /rawdata/togo-latest.osm.pbf https://download.geofabrik.de/africa/togo-latest.osm.pbf
        else
          echo "‚úÖ Fichier d√©j√† pr√©sent."
        fi

        echo "üì¶üó∫Ô∏è Extraction de la carte..."
        osrm-extract -p /opt/car.lua /rawdata/togo-latest.osm.pbf

        echo "üìÅ D√©placement des fichiers .osrm vers /data..."
        mv /rawdata/togo-latest.osrm* /data/

        echo "üß© Partition de la carte..."
        osrm-partition /data/togo-latest.osrm

        echo "üé® Personnalisation de la carte..."
        osrm-customize /data/togo-latest.osrm

  # Service principal OSRM (serveur de routage)
  osrm-server:
    image: osrm/osrm-backend
    container_name: osrm-server
    depends_on:
      - osrm-prepare
    volumes:
      - ${PROJECT_FOLDER:-.}/osrm-server/togo:/data
    ports:
      - "${OSRM_PORT:-5000}:5000"
    command: osrm-routed --algorithm mld /data/togo-latest.osrm
    networks:
      - chw-map-net
    restart: unless-stopped


volumes:
  chw-map-couchdb-config:

networks:
  chw-map-net:
    name: ${MAP_NETWORK:-chw-map-net}
    driver: bridge
